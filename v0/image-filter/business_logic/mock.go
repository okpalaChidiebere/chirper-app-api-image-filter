// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package imagefilterservice is a generated GoMock package.
package imagefilterservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/okpalaChidiebere/chirper-app-api-image/v0/common"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FilterImageFromURL mocks base method.
func (m *MockService) FilterImageFromURL(ctx context.Context, inputURL string, httpRequester common.IHttpRequester) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterImageFromURL", ctx, inputURL, httpRequester)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterImageFromURL indicates an expected call of FilterImageFromURL.
func (mr *MockServiceMockRecorder) FilterImageFromURL(ctx, inputURL, httpRequester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterImageFromURL", reflect.TypeOf((*MockService)(nil).FilterImageFromURL), ctx, inputURL, httpRequester)
}

// GetGetSignedUrl mocks base method.
func (m *MockService) GetGetSignedUrl(ctx context.Context, bucketName, objectKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGetSignedUrl", ctx, bucketName, objectKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGetSignedUrl indicates an expected call of GetGetSignedUrl.
func (mr *MockServiceMockRecorder) GetGetSignedUrl(ctx, bucketName, objectKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGetSignedUrl", reflect.TypeOf((*MockService)(nil).GetGetSignedUrl), ctx, bucketName, objectKey)
}

// UploadImageToS3Bucket mocks base method.
func (m *MockService) UploadImageToS3Bucket(ctx context.Context, filePath string, httpRequester common.IHttpRequester) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImageToS3Bucket", ctx, filePath, httpRequester)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImageToS3Bucket indicates an expected call of UploadImageToS3Bucket.
func (mr *MockServiceMockRecorder) UploadImageToS3Bucket(ctx, filePath, httpRequester interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImageToS3Bucket", reflect.TypeOf((*MockService)(nil).UploadImageToS3Bucket), ctx, filePath, httpRequester)
}
